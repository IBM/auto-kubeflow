---
- name: update kubeflow-gateway
  shell: |
    GATEWAY=$(cat << EOF
    apiVersion: networking.istio.io/v1alpha3
    kind: Gateway
    metadata:
      name: kubeflow-gateway
      namespace: kubeflow
    spec:
      selector:
        istio: ingressgateway
      servers:
      - port:
          number: 80
          name: http1
          protocol: HTTP
        hosts:
        - '*.{{ cluster_hostname }}'
      - port:
          number: 80
          name: http2
          protocol: HTTP
        hosts:
        - '{{ cluster_hostname }}'
        tls:
          httpsRedirect: true
      - hosts:
        - '{{ cluster_hostname }}'
        - '*.{{ cluster_hostname }}'
        port:
          name: https
          number: 443
          protocol: HTTPS
        tls:
          mode: SIMPLE
          privateKey: /etc/istio/ingressgateway-certs/tls.key
          serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
    EOF
    )

    echo "$GATEWAY" | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl apply -f -

- name: update envoy-filter
  shell: |
    ENVOYFILTER=$(cat << EOF
    apiVersion: networking.istio.io/v1alpha3
    kind: EnvoyFilter
    metadata:
      labels:
        app.kubernetes.io/component: oidc-authservice
        app.kubernetes.io/name: oidc-authservice
      name: authn-filter
      namespace: istio-system
    spec:
      configPatches:
      - applyTo: HTTP_FILTER
        match:
          context: GATEWAY
          listener:
            filterChain:
              filter:
                name: envoy.filters.network.http_connection_manager
            portNumber: 8443
        patch:
          operation: INSERT_BEFORE
          value:
            name: envoy.filters.http.ext_authz
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
              http_service:
                authorization_request:
                  allowed_headers:
                    patterns:
                    - exact: authorization
                    - exact: cookie
                    - exact: x-auth-token
                authorization_response:
                  allowed_upstream_headers:
                    patterns:
                    - exact: kubeflow-userid
                server_uri:
                  cluster: outbound|8080||authservice.istio-system.svc.cluster.local
                  timeout: 10s
                  uri: http://authservice.istio-system.svc.cluster.local
      workloadSelector:
        labels:
          istio: ingressgateway
    EOF
    )

    echo "$ENVOYFILTER" | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl apply -f -

- name: update knative settings
  shell: |
    KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl get configmap config-domain -n knative-serving -o json \
    | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/jq '.data."{{ cluster_hostname }}"=""' \
    | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl apply -f -

    KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl get configmap config-network -n knative-serving -o json \
    | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/jq '.data["{{ cluster_hostname }}"]=(.data["_example"]|gsub("domainTemplate: \"{{ '{{' }}.Name{{ '}}' }}.{{ '{{' }}.Namespace{{ '}}' }}.{{ '{{' }}.Domain{{ '}}' }}\""; "domainTemplate: \"{{ '{{' }}.Name{{ '}}' }}-{{ '{{' }}.Namespace{{ '}}' }}.{{ '{{' }}.Domain{{ '}}' }}\""; "m"))' \
    | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl apply -f -
