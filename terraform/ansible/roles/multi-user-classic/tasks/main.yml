---
- name: create load balancer for istio-ingressgatewway
  shell: |
    ibmcloud config --check-version=false
    KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl get svc/istio-ingressgateway -n istio-system -o json \
    | {{ lookup('env', 'HOME') }}/bin/jq '.spec.type="LoadBalancer"' | KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl apply -f - || true

    # wait for lb
    while true; do
      ingress_ip=$(KUBECONFIG={{ kube_config }} {{ lookup('env', 'HOME') }}/bin/kubectl get svc/istio-ingressgateway -n istio-system -o json | {{ lookup('env', 'HOME') }}/bin/jq -r '.status.loadBalancer.ingress[0].ip')
      if [[ -z "$ingress_ip" || "$ingress_ip" = "null" ]]; then
        sleep 20
        continue
      fi
      break
    done

    EXISTING_IP=$(ibmcloud ks nlb-dns ls -c "{{ cluster_name }}" --output json | {{ lookup('env', 'HOME') }}/bin/jq -r '.[0].nlbIPArray[0]')
    if [ "$ingress_ip" != "$EXISTING_IP" ]; then
      ibmcloud ks nlb-dns add -c "{{ cluster_name }}" --nlb-host "{{ cluster_hostname }}" --ip "$ingress_ip"
      ibmcloud ks nlb-dns rm classic -c "{{ cluster_name }}" --nlb-host "{{ cluster_hostname }}" --ip "$EXISTING_IP"
    fi
